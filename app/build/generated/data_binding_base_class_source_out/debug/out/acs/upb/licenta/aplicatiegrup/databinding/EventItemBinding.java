// Generated by view binder compiler. Do not edit!
package acs.upb.licenta.aplicatiegrup.databinding;

import acs.upb.licenta.aplicatiegrup.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EventItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView dateText1;

  @NonNull
  public final TextView eventNameText1;

  @NonNull
  public final TextView eventOwnerText1;

  @NonNull
  public final TextView groupText1;

  @NonNull
  public final TextView locationText1;

  private EventItemBinding(@NonNull CardView rootView, @NonNull TextView dateText1,
      @NonNull TextView eventNameText1, @NonNull TextView eventOwnerText1,
      @NonNull TextView groupText1, @NonNull TextView locationText1) {
    this.rootView = rootView;
    this.dateText1 = dateText1;
    this.eventNameText1 = eventNameText1;
    this.eventOwnerText1 = eventOwnerText1;
    this.groupText1 = groupText1;
    this.locationText1 = locationText1;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static EventItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EventItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.event_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EventItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dateText1;
      TextView dateText1 = ViewBindings.findChildViewById(rootView, id);
      if (dateText1 == null) {
        break missingId;
      }

      id = R.id.eventNameText1;
      TextView eventNameText1 = ViewBindings.findChildViewById(rootView, id);
      if (eventNameText1 == null) {
        break missingId;
      }

      id = R.id.eventOwnerText1;
      TextView eventOwnerText1 = ViewBindings.findChildViewById(rootView, id);
      if (eventOwnerText1 == null) {
        break missingId;
      }

      id = R.id.groupText1;
      TextView groupText1 = ViewBindings.findChildViewById(rootView, id);
      if (groupText1 == null) {
        break missingId;
      }

      id = R.id.locationText1;
      TextView locationText1 = ViewBindings.findChildViewById(rootView, id);
      if (locationText1 == null) {
        break missingId;
      }

      return new EventItemBinding((CardView) rootView, dateText1, eventNameText1, eventOwnerText1,
          groupText1, locationText1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
