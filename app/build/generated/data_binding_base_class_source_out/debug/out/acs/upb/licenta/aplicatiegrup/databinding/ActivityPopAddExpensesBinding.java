// Generated by view binder compiler. Do not edit!
package acs.upb.licenta.aplicatiegrup.databinding;

import acs.upb.licenta.aplicatiegrup.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPopAddExpensesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addExpenseButton2;

  @NonNull
  public final TextView chooseExpenseName;

  @NonNull
  public final EditText expenseCost;

  @NonNull
  public final EditText expenseName;

  private ActivityPopAddExpensesBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button addExpenseButton2, @NonNull TextView chooseExpenseName,
      @NonNull EditText expenseCost, @NonNull EditText expenseName) {
    this.rootView = rootView;
    this.addExpenseButton2 = addExpenseButton2;
    this.chooseExpenseName = chooseExpenseName;
    this.expenseCost = expenseCost;
    this.expenseName = expenseName;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPopAddExpensesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPopAddExpensesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pop_add_expenses, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPopAddExpensesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addExpenseButton2;
      Button addExpenseButton2 = ViewBindings.findChildViewById(rootView, id);
      if (addExpenseButton2 == null) {
        break missingId;
      }

      id = R.id.choose_expense_name;
      TextView chooseExpenseName = ViewBindings.findChildViewById(rootView, id);
      if (chooseExpenseName == null) {
        break missingId;
      }

      id = R.id.expense_cost;
      EditText expenseCost = ViewBindings.findChildViewById(rootView, id);
      if (expenseCost == null) {
        break missingId;
      }

      id = R.id.expense_name;
      EditText expenseName = ViewBindings.findChildViewById(rootView, id);
      if (expenseName == null) {
        break missingId;
      }

      return new ActivityPopAddExpensesBinding((ConstraintLayout) rootView, addExpenseButton2,
          chooseExpenseName, expenseCost, expenseName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
